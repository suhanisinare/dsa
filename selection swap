#include <stdio.h>
// Function to perform Selection Sort and track comparisons and swaps
void selectionSort(int arr[], int n, int *comparisons, int *swaps) {
 int i, j, minIndex, temp;
 *comparisons = 0;
 *swaps = 0;
 // Outer loop to iterate over each element
 for (i = 0; i < n - 1; i++) {
 minIndex = i;
 // Inner loop to find the minimum element in the unsorted part of the array
 for (j = i + 1; j < n; j++) {
 (*comparisons)++; // Increment comparisons
 if (arr[j] < arr[minIndex]) {
 minIndex = j; // Update the index of the minimum element
 }
 }
 // Swap the found minimum element with the element at position i
 if (minIndex != i) {
 temp = arr[i];
 arr[i] = arr[minIndex];
 arr[minIndex] = temp;
 (*swaps)++; // Increment swaps (only if a swap happens)
 }
 }
}
// Function to print the array
void printArray(int arr[], int n) {
 for (int i = 0; i < n; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
}
int main() {
 int n, comparisons, swaps;
 
 // Input the size of the array
 printf("Enter the number of elements: ");
 scanf("%d", &n);
 
 int arr[n];
 
 // Input the array elements
 printf("Enter the elements: ");
 for (int i = 0; i < n; i++) {
 scanf("%d", &arr[i]);
 }
 
 // Call selectionSort function
 selectionSort(arr, n, &comparisons, &swaps);
 
 // Output the sorted array
 printf("Sorted array: ");
 printArray(arr, n);
 
 // Output the number of comparisons and swaps
 printf("Number of comparisons: %d\n", comparisons);
 printf("Number of swaps: %d\n", swaps);
 return 0;
}
