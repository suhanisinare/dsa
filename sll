#include <stdio.h>
#include <stdlib.h>
// Define the structure for a node
struct Node {
 int data;
 struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = data;
 newNode->next = NULL;
 return newNode;
}
// Function to display the linked list
void display(struct Node* head) {
 struct Node* temp = head;
 while (temp != NULL) {
 printf("%d -> ", temp->data);
 temp = temp->next;
 }
 printf("NULL\n");
}
// Function to insert a node at the front
void insertFront(struct Node** head, int data) {
 struct Node* newNode = createNode(data);
 newNode->next = *head;
 *head = newNode;
}
// Function to insert a node at the end
void insertEnd(struct Node** head, int data) {
 struct Node* newNode = createNode(data);
 if (*head == NULL) {
 *head = newNode;
 return;
 }
 struct Node* temp = *head;
 while (temp->next != NULL) {
 temp = temp->next;
 }
 temp->next = newNode;
}
// Function to insert a node in the middle
void insertMiddle(struct Node** head, int data, int position) {
 struct Node* newNode = createNode(data);
 if (position == 1) {
 newNode->next = *head;
 *head = newNode;
 return;
 }
 struct Node* temp = *head;
 for (int i = 1; i < position - 1 && temp != NULL; i++) {
 temp = temp->next;
 }
 if (temp == NULL) {
 printf("Position out of range\n");
 return;
 }
 newNode->next = temp->next;
 temp->next = newNode;
}
// Function to delete a node from the front
void deleteFront(struct Node** head) {
 if (*head == NULL) {
 printf("List is empty\n");
 return;
 }
 struct Node* temp = *head;
 *head = (*head)->next;
 free(temp);
}
// Function to delete a node from the end
void deleteEnd(struct Node** head) {
 if (*head == NULL) {
 printf("List is empty\n");
 return;
 }
 struct Node* temp = *head;
 if (temp->next == NULL) {
 free(temp);
 *head = NULL;
 return;
 }
 while (temp->next->next != NULL) {
 temp = temp->next;
 }
 free(temp->next);
 temp->next = NULL;
}
// Function to delete a node from the middle
void deleteMiddle(struct Node** head, int position) {
 if (*head == NULL) {
 printf("List is empty\n");
 return;
 }
 struct Node* temp = *head;
 if (position == 1) {
 *head = temp->next;
 free(temp);
 return;
 }
 for (int i = 1; i < position - 1 && temp != NULL; i++) {
 temp = temp->next;
 }
 if (temp == NULL || temp->next == NULL) {
 printf("Position out of range\n");
 return;
 }
 struct Node* next = temp->next->next;
 free(temp->next);
 temp->next = next;
}
// Function to display the linked list in reverse
void displayReverse(struct Node* head) {
 if (head == NULL) {
 return;
 }
 displayReverse(head->next);
 printf("%d -> ", head->data);
}
// Function to reverse the linked list
void reverseList(struct Node** head) {
 struct Node* prev = NULL;
 struct Node* current = *head;
 struct Node* next = NULL;
 while (current != NULL) {
 next = current->next;
 current->next = prev;
 prev = current;
 current = next;
 }
 *head = prev;
}
int main() {
 struct Node* head = NULL;
 int choice, data, position;
 while (1) {
 printf("\nMenu:\n");
 printf("1. Display\n");
 printf("2. Insert at front\n");
 printf("3. Insert at end\n");
 printf("4. Insert in the middle\n");
 printf("5. Delete from front\n");
 printf("6. Delete from end\n");
 printf("7. Delete from middle\n");
 printf("8. Display in reverse\n");
 printf("9. Reverse the list\n");
 printf("10. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 switch (choice) {
 case 1:
 display(head);
 break;
 case 2:
 printf("Enter data: ");
 scanf("%d", &data);
 insertFront(&head, data);
 break;
 case 3:
 printf("Enter data: ");
 scanf("%d", &data);
 insertEnd(&head, data);
 break;
 case 4:
 printf("Enter data: ");
 scanf("%d", &data);
 printf("Enter position: ");
 scanf("%d", &position);
 insertMiddle(&head, data, position);
 break;
 case 5:
 deleteFront(&head);
 break;
 case 6:
 deleteEnd(&head);
 break;
 case 7:
 printf("Enter position: ");
 scanf("%d", &position);
 deleteMiddle(&head, position);
 break;
 case 8:
 displayReverse(head);
 printf("NULL\n");
 break;
 case 9:
 reverseList(&head);
 break;
 case 10:
 exit(0);
 default:
 printf("Invalid choice\n");
 }
 }
 return 0;
}
