#include <stdio.h>
#include <stdlib.h>
// Define the structure for a node in the BST
struct Node {
 int data;
 struct Node* left;
 struct Node* right;
};
// Function to create a new node
struct Node* createNode(int data) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = data;
 newNode->left = newNode->right = NULL;
 return newNode;
}
// Function to insert a node in the BST
struct Node* insertNode(struct Node* root, int data) {
 if (root == NULL) {
 root = createNode(data);
 } else if (data < root->data) {
 root->left = insertNode(root->left, data);
 } else {
 root->right = insertNode(root->right, data);
 }
 return root;
}
// Function for inorder traversal
void inorderTraversal(struct Node* root) {
 if (root != NULL) {
 inorderTraversal(root->left);
 printf("%d ", root->data);
 inorderTraversal(root->right);
 }
}
// Function for preorder traversal
void preorderTraversal(struct Node* root) {
 if (root != NULL) {
 printf("%d ", root->data);
 preorderTraversal(root->left);
 preorderTraversal(root->right);
 }
}
// Function for postorder traversal
void postorderTraversal(struct Node* root) {
 if (root != NULL) {
 postorderTraversal(root->left);
 postorderTraversal(root->right);
 printf("%d ", root->data);
 }
}
// Function to search for a node in the BST
struct Node* searchNode(struct Node* root, int data) {
 if (root == NULL || root->data == data) {
 return root;
 } else if (data < root->data) {
 return searchNode(root->left, data);
 } else {
 return searchNode(root->right, data);
 }
}
int main() {
 struct Node* root = NULL;
 int choice, data;
 while (1) {
 printf("\n1. Insert Node\n");
 printf("2. Inorder Traversal\n");
 printf("3. Preorder Traversal\n");
 printf("4. Postorder Traversal\n");
 printf("5. Search Node\n");
 printf("6. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 switch (choice) {
 case 1:
 printf("Enter data to insert: ");
 scanf("%d", &data);
 root = insertNode(root, data);
 break;
 case 2:
 printf("Inorder Traversal: ");
 inorderTraversal(root);
 printf("\n");
 break;
 case 3:
 printf("Preorder Traversal: ");
 preorderTraversal(root);
 printf("\n");
 break;
 case 4:
 printf("Postorder Traversal: ");
 postorderTraversal(root);
 printf("\n");
 break;
 case 5:
 printf("Enter data to search: ");
 scanf("%d", &data);
 struct Node* foundNode = searchNode(root, data);
 if (foundNode != NULL) {
 printf("Node found with data: %d\n", foundNode->data);
 } else {
 printf("Node not found\n");
 }
 break;
 case 6:
 exit(0);
 default:
 printf("Invalid choice\n");
 }
 }
 return 0;
}
