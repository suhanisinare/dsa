#include <stdio.h>
// Function to perform Insertion Sort and track comparisons and swaps
void insertionSort(int arr[], int n, int *comparisons, int *swaps) {
 int i, j, key, temp;
 *comparisons = 0;
 *swaps = 0;
 // Traverse the array from the second element to the last
 for (i = 1; i < n; i++) {
 key = arr[i]; // Element to be inserted
 j = i - 1;
 // Move elements of arr[0..i-1] that are greater than key, to one position ahead of their current 
position
 while (j >= 0) {
 (*comparisons)++; // Increment comparisons
 if (arr[j] > key) {
 // Shift element to the right
 arr[j + 1] = arr[j];
 j = j - 1;
 (*swaps)++; // Increment swaps for each shift (this counts each element move)
 } else {
 break; // If no more shifts needed, break the loop
 }
 }
 // Place key at its correct position
 arr[j + 1] = key;
 }
}
// Function to print the array
void printArray(int arr[], int n) {
 for (int i = 0; i < n; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
}
int main() {
 int n, comparisons, swaps;
 
 // Input the size of the array
 printf("Enter the number of elements: ");
 scanf("%d", &n);
 
 int arr[n];
 
 // Input the array elements
 printf("Enter the elements: ");
 for (int i = 0; i < n; i++) {
 scanf("%d", &arr[i]);
 }
 
 // Call insertionSort function
 insertionSort(arr, n, &comparisons, &swaps);
 
 // Output the sorted array
 printf("Sorted array: ");
 printArray(arr, n);
 
 // Output the number of comparisons and swaps
 printf("Number of comparisons: %d\n", comparisons);
 printf("Number of swaps: %d\n", swaps);
 return 0;
}
